@page "/"
@using MonkeyFinder.Components.Controls
@using MonkeyFinder.Model
@using MonkeyFinder.Services
@inject MonkeyService MonkeyService
@inject IDialogService DialogService

<div>
    <button class="button-yellow" @onclick="AddMonkey">Add New Monkey</button>
    <p>Name: @DialogData.Name - Population: @DialogData.Population</p>
    @if (_monkeys.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul class="card-list">
            @foreach (var monkey in _monkeys)
            {
                <li class="card-item">
                    <img class="card-image" src="@monkey.Image" alt="@monkey.Name"/>
                    <div class="card-content">
                        <h2>@monkey.Name</h2>
                        <p>@monkey.Location</p>
                    </div>
                </li>
            }
        </ul>
    }

</div>

@code{
    private List<Monkey> _monkeys = [];
    private Monkey DialogData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _monkeys = await MonkeyService.GetMonkeysAsync();
    }

    private async Task AddMonkey()
    {
        // MAUI Debug console
        // Debug.WriteLine("Add Monkey");

        // Create a new instance of DialogData to allow the user to cancel the update
        var data = new Monkey();
        var dialog = await DialogService.ShowDialogAsync<SimpleCustomizedDialog>(data, new DialogParameters
        {
            Title = "Add a New Monkey",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true
        });

        var result = await dialog.Result;
        if (result is { Cancelled: false, Data: not null })
        {
            DialogData = (Monkey)result.Data;
            MonkeyService.AddMonkey(DialogData);
            _monkeys = await MonkeyService.GetMonkeysAsync();
        }
    }

}
