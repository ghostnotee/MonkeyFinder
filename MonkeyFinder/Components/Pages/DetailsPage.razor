@page "/details/{name}"
@using MonkeyFinder.MauiPages
@using MonkeyFinder.Model
@inject NavigationManager NavigationManager
@inject MonkeyService MonkeyService
@inject RatingState RatingState

<div>
    <div class="detailscard-header">
        <button class="detailsback-button" @onclick="CloseWindow">&#8592;</button>
        <h1 class="detailstitle">@Monkey.Name</h1>
    </div>

    <div class="detailscard-image">
        <img src="@Monkey.Image">
        <h2 class="detailsimage-title">@Monkey.Name</h2>
    </div>

    <div class="detailscard-body">
        <button class="detailsbutton-yellow" @onclick="OpenMap">Show on Map</button>
        <button class="detailsbutton-yellow" @onclick="AddRating">Rate This Monkey!</button>
        <p class="detailsdescription">@Monkey.Details</p>
        <p class="detailslocation"><strong>Location:</strong> @Monkey.Location</p>
        <p class="detailspopulation"><strong>Population:</strong> @Monkey.Population</p>
        <p class="detailsrating"><strong>Rating:</strong> @RatingState.GetRating(Monkey)</p>
    </div>
</div>

@code {

    private readonly IMap _map;

    public DetailsPage(IMap map)
    {
        _map = map;
    }

    [Parameter] public string? Name { get; set; }

    private Monkey Monkey { get; set; } = new();

    protected override void OnInitialized()
    {
        Monkey = MonkeyService.FindMonkeyByName(Name);
        RatingState.RatingChanged += (_, _) => { _ = InvokeAsync(() => StateHasChanged()); };
        base.OnInitialized();
    }

    private void CloseWindow()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AddRating()
    {
        ((Application)App).Windows[0].Page!.Navigation.PushAsync(new MonkeyRatingPage(Monkey, RatingState));
    }

    private async Task OpenMap()
    {
        try
        {
            if (_map is null) throw new Exception("Map not available.");
            await _map.OpenAsync(Monkey.Latitude, Monkey.Longitude, new MapLaunchOptions
            {
                Name = Monkey.Name,
                NavigationMode = NavigationMode.None
            });
        }
        catch (Exception e)
        {
            await ((Application)App).Windows[0].Page!.DisplayAlert("Error", e.Message, "OK");
        }
    }

}